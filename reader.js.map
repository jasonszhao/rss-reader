{"version":3,"sources":["reader.jsx"],"names":[],"mappings":"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","file":"reader.js","sourcesContent":["/******** App constants ******/\nconst DEBUG = true\nconst STORAGE_DB = 'state-rss'\nconst STORAGE_CHANNEL = 'channel-rss'\n\n\n/***** Some \"functional\" utilities ****/\nconst produce = immer.default.bind(immer)\n\n//console.logs args and returns the last one\n//This can be a bottleneck if we're logging ~1000 items at once. \n//How do I know? I've tested this function with and without side effects\n//With log: lag with a few seconds. Without console.log: instantaneous\nconst log = (...args) => \n    ( DEBUG ? console.log.apply(console, args) : null\n    , args[args.length - 1]\n    )\n\nconst uuid = () => (Math.random()+1).toString(36).slice(2) \n\n/***********\n * Model\n *********/\nconst init = () => ({\n  sources: [\n    {\n      url: 'http://nautil.us/rss/all',\n      category: 'Science',\n      id: 'm4nfqca9oz'\n    },\n    {\n      url: 'https://www.theatlantic.com/feed/channel/business/',\n      category: 'Business',\n      id: 'gtie5vvssvl'\n    }\n  ],\n  cached_sources: {},\n  cached_articles: []\n})\n\n/**********************\n * Actions \n **********************/\n\nconst initial_actions = model => \n    model.sources.map(source => request_feed(source.url))\n\n// Actions\nconst REQUEST_FEED = 'request_feed'\nconst REQUEST_FEED_RETURN = 'update_feed_cache'\n\nconst ADD_FEED_SOURCE = 'add_feed_source'\nconst REMOVE_FEED_SOURCE = 'remove_feed_source'\nconst UPDATE_FEED_SOURCE = 'update_feed_source'\n\n// having unique identifiers not only helps with debugging, but is also\n// necessary for the `storage` event to register repeated actions.\n//\n// \"The storage event is fired on the window object whenever setItem(),\n// removeItem(), or clear() is called and *actually changes something*. For\n// example, if you set an item to its existing value or call clear() when there\n// are no named keys, the storage event will not fire, because nothing actually\n// changed in the storage area.\"\n//\n// From http://diveintohtml5.info/storage.html \n// (Accessed April 21, 2018)\nconst base_action = () => ({\n    timestamp: (new Date()).toString(),\n    uuid: uuid()\n})\n\nconst request_feed = url => ({\n    ...base_action(),\n    type: REQUEST_FEED,\n    url,\n    replicate: false\n})\nconst request_feed_return = (url, status, data) => ({\n    ...base_action(),\n    type: REQUEST_FEED_RETURN,\n    url,\n    status,\n    data,\n    replicate: false\n})\n\n\n/* External actions */\n\nconst server_parsed = url => \n    axios.post('/api/rssparser', {url: url})\n        .then(res => res.data)\n\n/* END external actions */\n\nfunction update(action, model) {\n    switch(action.type) {\n        case REQUEST_FEED: \n            server_parsed(action.url)\n                .then(data => actions(request_feed_return(action.url, 200, data)))\n            return model\n\n        case REQUEST_FEED_RETURN:\n            if(action.status === 200) \n                return produce(model, d => {\n                    d.cached_sources[uuid()] = action.data\n                })\n            else\n                return model\n\n        case ADD_FEED_SOURCE:\n        case REMOVE_FEED_SOURCE:\n        case UPDATE_FEED_SOURCE:\n            return model\n\n        default:\n            console.log('BAAD! action not matched!')\n            console.log('action: ', action)\n            console.log('model: ', model)\n            return model\n    }\n}\n\nconst restoreState = () => {\n    const restored = JSON.parse(localStorage.getItem(STORAGE_DB))\n    return restored === null ? init() : restored\n}\nconst saveState = (model) => {\n  console.log('saving model: ', model)\n  localStorage.setItem(STORAGE_DB, JSON.stringify(model))\n}\n\n/***** View *******/\n\nconst ViewArticle = (model, source, article) => \n  <article key={article.id}>\n    <h1>{article.title}</h1>\n    <div>\n      {source.meta.title } (<a href={article.permalink || article.link}>\n    {(new URI(article.permalink || article.link)).hostname()}\n      </a>) {\n    luxon.DateTime.fromISO(article.date).toLocaleString({ \n      month: \"short\", year: \"numeric\", day: 'numeric'\n    })\n      }\n    </div>\n    <div>Summary</div>\n    <div class=\"summary\" dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(article.summary)}}></div>\n  </article>\n  \nconst ViewMain = model => \n  <main>\n  {\n    R.pipe\n      ( R.chain(source => source.articles.map(a => ({\n            view: ViewArticle(model, source, a),\n            data: a\n        })))\n      , R.sort( (a, b) => \n          new Date(a.data.date) < new Date(b.data.date) ? 1 : -1)\n      , R.map(R.prop(\"view\"))\n\n    ) (Object.values(model.cached_sources))\n  }\n  <p class=\"footer\"> \n    That's it for now. Take a deep breath and enjoy some fresh air outside.\n  </p>\n  </main>\n\nfunction render (model) {\n  Inferno.render\n    ( ViewMain(model)\n    , document.querySelector('main')\n    )\n}\n\n\n// Streams\nconst actions = flyd.stream()\nconst saved_models = flyd.stream()\n\n\n\nconst model = flyd.scan(R.flip(update), restoreState(), actions)\n\nactions\n  .map(R.curryN(2, log)('action: '))\n\ninitial_actions(model()).forEach(a => actions(a))\n\nmodel\n  .map(R.curryN(2,log)('rendering with model: '))\n  .map(model => requestAnimationFrame(R.curryN(2, render)(model)))\n\nflyd.on\n    ( model => (actions() && actions().replicate) ? saved_models(model) : null\n    , model\n    )\n\nflyd.on(saveState, saved_models)\n//if (and only if) `actions` volume gets too high, should we throttle saveState\n\n\nconst incomingExternalActions$ = \n  forwardTo\n    ( actions\n    , action => \n         log('incomingExternalActions$: ', { ...action, replicate: false})\n    )\n\nconst outgoingExternalActions$ = filter(R.prop('replicate'), actions)\n\n///// External listeners\nwindow.addEventListener('storage', e => {\n  if (e.key !== STORAGE_CHANNEL)\n        return\n  try {\n    const contents = JSON.parse(e.newValue)\n    console.log('event from channel: ', contents)\n\n    // \"The StorageEvent is fired whenever a change is made to the Storage\n    // object (note that this event is not fired for sessionStorage changes).\n    // This won't work on the same page that is making the changes — it is\n    // really a way for other pages on the domain using the storage to sync any\n    // changes that are made.\"\n    //\n    // From https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\n    // (Accessed April 14, 2018)\n\n    contents.replicate = false\n    incomingExternalActions$(contents)\n  }\n  catch(e) {\n    console.error(e)\n  }\n})\n\n\n// localstorage IS thread-safe. Therefore, writing to it at the same time \n// won't clash and produce gibberish. I'm pretty sure this means that for each \n// write, there will also be a 'storage' event emitted for the other tabs. \n// This post cites the W3C.\n//\n// See https://stackoverflow.com/questions/22001112/is-localstorage-thread-safe\n// (Accessed April 14, 2018)\n//\n//\n// The WHATWG seems to directly contradicts this. \n//\n// This specification does not define the interaction with other browsing\n// contexts in a multiprocess user agent, and authors are encouraged to assume\n// that there is no locking mechanism. A site could, for instance, try to read the\n// value of a key, increment its value, then write it back out, using the new\n// value as a unique identifier for the session; if the site does this twice in\n// two different browser windows at the same time, it might end up using the same\n// \"unique\" identifier for both sessions, with potentially disastrous effects.\n//\n// From https://html.spec.whatwg.org/multipage/webstorage.html#localStorageEvent\n// (Accessed April 21, 2018)\n\nflyd.on\n  ( a => localStorage.setItem(STORAGE_CHANNEL, log('sending action: ', JSON.stringify(a)) ) \n  , outgoingExternalActions$\n  )\n\n"]}